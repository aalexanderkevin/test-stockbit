// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package moviepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OmdbClient is the client API for Omdb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OmdbClient interface {
	MovieSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	MovieDetail(ctx context.Context, in *DetailRequest, opts ...grpc.CallOption) (*Movie, error)
}

type omdbClient struct {
	cc grpc.ClientConnInterface
}

func NewOmdbClient(cc grpc.ClientConnInterface) OmdbClient {
	return &omdbClient{cc}
}

func (c *omdbClient) MovieSearch(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/movie.Omdb/MovieSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omdbClient) MovieDetail(ctx context.Context, in *DetailRequest, opts ...grpc.CallOption) (*Movie, error) {
	out := new(Movie)
	err := c.cc.Invoke(ctx, "/movie.Omdb/MovieDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OmdbServer is the server API for Omdb service.
// All implementations must embed UnimplementedOmdbServer
// for forward compatibility
type OmdbServer interface {
	MovieSearch(context.Context, *SearchRequest) (*SearchResponse, error)
	MovieDetail(context.Context, *DetailRequest) (*Movie, error)
	mustEmbedUnimplementedOmdbServer()
}

// UnimplementedOmdbServer must be embedded to have forward compatible implementations.
type UnimplementedOmdbServer struct {
}

func (UnimplementedOmdbServer) MovieSearch(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovieSearch not implemented")
}
func (UnimplementedOmdbServer) MovieDetail(context.Context, *DetailRequest) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovieDetail not implemented")
}
func (UnimplementedOmdbServer) mustEmbedUnimplementedOmdbServer() {}

// UnsafeOmdbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OmdbServer will
// result in compilation errors.
type UnsafeOmdbServer interface {
	mustEmbedUnimplementedOmdbServer()
}

func RegisterOmdbServer(s grpc.ServiceRegistrar, srv OmdbServer) {
	s.RegisterService(&Omdb_ServiceDesc, srv)
}

func _Omdb_MovieSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmdbServer).MovieSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.Omdb/MovieSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmdbServer).MovieSearch(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Omdb_MovieDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmdbServer).MovieDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.Omdb/MovieDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmdbServer).MovieDetail(ctx, req.(*DetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Omdb_ServiceDesc is the grpc.ServiceDesc for Omdb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Omdb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movie.Omdb",
	HandlerType: (*OmdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MovieSearch",
			Handler:    _Omdb_MovieSearch_Handler,
		},
		{
			MethodName: "MovieDetail",
			Handler:    _Omdb_MovieDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moviepb/movie.proto",
}
